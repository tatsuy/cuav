From 99c3fe9f9e383e0479c44cd54dc414ccb0fd23d8 Mon Sep 17 00:00:00 2001
From: Andrew Tridgell <tridge@samba.org>
Date: Fri, 4 May 2012 16:45:17 +1000
Subject: [PATCH 1/3] aded no_dtr option for APM2

---
 drivers/usb/class/cdc-acm.c |   28 +++++++++++++++++++++++++---
 1 file changed, 25 insertions(+), 3 deletions(-)

diff --git a/drivers/usb/class/cdc-acm.c b/drivers/usb/class/cdc-acm.c
index 158f631..39d14af 100644
--- a/drivers/usb/class/cdc-acm.c
+++ b/drivers/usb/class/cdc-acm.c
@@ -65,6 +65,13 @@ static DEFINE_MUTEX(open_mutex);
 static const struct tty_port_operations acm_port_ops = {
 };
 
+/* 
+ * when no_dtr is set, attempts to set DTR are ignored. This is used
+ * to prevent reset of DTR sensitive devices on reconnect (especially
+ * APM2 AutoPilots where DTR being asserted can cause a UAV to crash)
+ */
+static bool no_dtr;
+
 /*
  * Functions for ACM control messages.
  */
@@ -457,7 +464,8 @@ static int acm_tty_open(struct tty_struct *tty, struct file *filp)
 {
 	struct acm *acm;
 	int rv = -ENODEV;
-
+	unsigned ctrlout;
+  
 	mutex_lock(&open_mutex);
 
 	acm = acm_table[tty->index];
@@ -492,7 +500,13 @@ static int acm_tty_open(struct tty_struct *tty, struct file *filp)
 		goto bail_out;
 	}
 
-	if (0 > acm_set_control(acm, acm->ctrlout = ACM_CTRL_DTR | ACM_CTRL_RTS) &&
+	if (no_dtr) {
+		ctrlout = ACM_CTRL_RTS;
+	} else {
+		ctrlout = ACM_CTRL_DTR | ACM_CTRL_RTS;
+	}
+
+	if (0 > acm_set_control(acm, acm->ctrlout = ctrlout) &&
 	    (acm->ctrl_caps & USB_CDC_CAP_LINE))
 		goto bail_out;
 
@@ -703,7 +717,7 @@ static int acm_tty_tiocmget(struct tty_struct *tty)
 	if (!ACM_READY(acm))
 		return -EINVAL;
 
-	return (acm->ctrlout & ACM_CTRL_DTR ? TIOCM_DTR : 0) |
+	return ((acm->ctrlout & ACM_CTRL_DTR) && !no_dtr ? TIOCM_DTR : 0) |
 	       (acm->ctrlout & ACM_CTRL_RTS ? TIOCM_RTS : 0) |
 	       (acm->ctrlin  & ACM_CTRL_DSR ? TIOCM_DSR : 0) |
 	       (acm->ctrlin  & ACM_CTRL_RI  ? TIOCM_RI  : 0) |
@@ -728,6 +742,9 @@ static int acm_tty_tiocmset(struct tty_struct *tty,
 
 	newctrl = (newctrl & ~clear) | set;
 
+	if (no_dtr)
+		newctrl &= ~ACM_CTRL_DTR;
+
 	if (acm->ctrlout == newctrl)
 		return 0;
 	return acm_set_control(acm, acm->ctrlout = newctrl);
@@ -782,6 +799,10 @@ static void acm_tty_set_termios(struct tty_struct *tty,
 	} else
 		newctrl |=  ACM_CTRL_DTR;
 
+	if (no_dtr) {
+		newctrl &= ~ACM_CTRL_DTR;
+	}
+
 	if (newctrl != acm->ctrlout)
 		acm_set_control(acm, acm->ctrlout = newctrl);
 
@@ -1684,5 +1705,6 @@ module_exit(acm_exit);
 
 MODULE_AUTHOR(DRIVER_AUTHOR);
 MODULE_DESCRIPTION(DRIVER_DESC);
+module_param(no_dtr, bool, S_IRUGO | S_IWUSR);
 MODULE_LICENSE("GPL");
 MODULE_ALIAS_CHARDEV_MAJOR(ACM_TTY_MAJOR);
-- 
1.7.9.5

